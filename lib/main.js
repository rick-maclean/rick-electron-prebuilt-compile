'use strict';

//NOTE: this is the mail.js electron process. We need to do react too.
//NOTE:  Browser windows are at the core of every Electron application.
//NOTE: browserWindow is one of the richest objects in electron

var _require = require('electron');

const app = _require.app,
      BrowserWindow = _require.BrowserWindow;

const path = require('path');
const url = require('url');

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let win;

function createWindow() {
  // Create the browser window.
  win = new BrowserWindow({ width: 1200, height: 972 });

  // and load the index.html of the app.
  win.loadURL(url.format({
    pathname: path.join(__dirname, 'index_plane.html'),
    protocol: 'file:',
    slashes: true
  }));

  // Open the DevTools.
  win.webContents.openDevTools();

  // Emitted when the window is closed.
  win.on('closed', () => {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    win = null;
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (win === null) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJhcHAiLCJCcm93c2VyV2luZG93IiwicGF0aCIsInVybCIsIndpbiIsImNyZWF0ZVdpbmRvdyIsIndpZHRoIiwiaGVpZ2h0IiwibG9hZFVSTCIsImZvcm1hdCIsInBhdGhuYW1lIiwiam9pbiIsIl9fZGlybmFtZSIsInByb3RvY29sIiwic2xhc2hlcyIsIndlYkNvbnRlbnRzIiwib3BlbkRldlRvb2xzIiwib24iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJxdWl0Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7ZUFFNkJBLFFBQVEsVUFBUixDOztNQUF0QkMsRyxZQUFBQSxHO01BQUtDLGEsWUFBQUEsYTs7QUFDWixNQUFNQyxPQUFPSCxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1JLE1BQU1KLFFBQVEsS0FBUixDQUFaOztBQUVBO0FBQ0E7QUFDQSxJQUFJSyxHQUFKOztBQUVBLFNBQVNDLFlBQVQsR0FBeUI7QUFDdkI7QUFDQUQsUUFBTSxJQUFJSCxhQUFKLENBQWtCLEVBQUNLLE9BQU8sSUFBUixFQUFjQyxRQUFRLEdBQXRCLEVBQWxCLENBQU47O0FBRUE7QUFDQUgsTUFBSUksT0FBSixDQUFZTCxJQUFJTSxNQUFKLENBQVc7QUFDckJDLGNBQVVSLEtBQUtTLElBQUwsQ0FBVUMsU0FBVixFQUFxQixrQkFBckIsQ0FEVztBQUVyQkMsY0FBVSxPQUZXO0FBR3JCQyxhQUFTO0FBSFksR0FBWCxDQUFaOztBQU1BO0FBQ0FWLE1BQUlXLFdBQUosQ0FBZ0JDLFlBQWhCOztBQUVBO0FBQ0FaLE1BQUlhLEVBQUosQ0FBTyxRQUFQLEVBQWlCLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0FiLFVBQU0sSUFBTjtBQUNELEdBTEQ7QUFNRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQUosSUFBSWlCLEVBQUosQ0FBTyxPQUFQLEVBQWdCWixZQUFoQjs7QUFFQTtBQUNBTCxJQUFJaUIsRUFBSixDQUFPLG1CQUFQLEVBQTRCLE1BQU07QUFDaEM7QUFDQTtBQUNBLE1BQUlDLFFBQVFDLFFBQVIsS0FBcUIsUUFBekIsRUFBbUM7QUFDakNuQixRQUFJb0IsSUFBSjtBQUNEO0FBQ0YsQ0FORDs7QUFRQXBCLElBQUlpQixFQUFKLENBQU8sVUFBUCxFQUFtQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQSxNQUFJYixRQUFRLElBQVosRUFBa0I7QUFDaEJDO0FBQ0Q7QUFDRixDQU5EOztBQVFBO0FBQ0EiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vTk9URTogdGhpcyBpcyB0aGUgbWFpbC5qcyBlbGVjdHJvbiBwcm9jZXNzLiBXZSBuZWVkIHRvIGRvIHJlYWN0IHRvby5cclxuLy9OT1RFOiAgQnJvd3NlciB3aW5kb3dzIGFyZSBhdCB0aGUgY29yZSBvZiBldmVyeSBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cclxuLy9OT1RFOiBicm93c2VyV2luZG93IGlzIG9uZSBvZiB0aGUgcmljaGVzdCBvYmplY3RzIGluIGVsZWN0cm9uXHJcblxyXG5jb25zdCB7YXBwLCBCcm93c2VyV2luZG93fSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxyXG5jb25zdCB1cmwgPSByZXF1aXJlKCd1cmwnKVxyXG5cclxuLy8gS2VlcCBhIGdsb2JhbCByZWZlcmVuY2Ugb2YgdGhlIHdpbmRvdyBvYmplY3QsIGlmIHlvdSBkb24ndCwgdGhlIHdpbmRvdyB3aWxsXHJcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxyXG5sZXQgd2luXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVXaW5kb3cgKCkge1xyXG4gIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXHJcbiAgd2luID0gbmV3IEJyb3dzZXJXaW5kb3coe3dpZHRoOiAxMjAwLCBoZWlnaHQ6IDk3Mn0pXHJcblxyXG4gIC8vIGFuZCBsb2FkIHRoZSBpbmRleC5odG1sIG9mIHRoZSBhcHAuXHJcbiAgd2luLmxvYWRVUkwodXJsLmZvcm1hdCh7XHJcbiAgICBwYXRobmFtZTogcGF0aC5qb2luKF9fZGlybmFtZSwgJ2luZGV4X3BsYW5lLmh0bWwnKSxcclxuICAgIHByb3RvY29sOiAnZmlsZTonLFxyXG4gICAgc2xhc2hlczogdHJ1ZVxyXG4gIH0pKVxyXG5cclxuICAvLyBPcGVuIHRoZSBEZXZUb29scy5cclxuICB3aW4ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKClcclxuXHJcbiAgLy8gRW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgY2xvc2VkLlxyXG4gIHdpbi5vbignY2xvc2VkJywgKCkgPT4ge1xyXG4gICAgLy8gRGVyZWZlcmVuY2UgdGhlIHdpbmRvdyBvYmplY3QsIHVzdWFsbHkgeW91IHdvdWxkIHN0b3JlIHdpbmRvd3NcclxuICAgIC8vIGluIGFuIGFycmF5IGlmIHlvdXIgYXBwIHN1cHBvcnRzIG11bHRpIHdpbmRvd3MsIHRoaXMgaXMgdGhlIHRpbWVcclxuICAgIC8vIHdoZW4geW91IHNob3VsZCBkZWxldGUgdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudC5cclxuICAgIHdpbiA9IG51bGxcclxuICB9KVxyXG59XHJcblxyXG4vLyBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aGVuIEVsZWN0cm9uIGhhcyBmaW5pc2hlZFxyXG4vLyBpbml0aWFsaXphdGlvbiBhbmQgaXMgcmVhZHkgdG8gY3JlYXRlIGJyb3dzZXIgd2luZG93cy5cclxuLy8gU29tZSBBUElzIGNhbiBvbmx5IGJlIHVzZWQgYWZ0ZXIgdGhpcyBldmVudCBvY2N1cnMuXHJcbmFwcC5vbigncmVhZHknLCBjcmVhdGVXaW5kb3cpXHJcblxyXG4vLyBRdWl0IHdoZW4gYWxsIHdpbmRvd3MgYXJlIGNsb3NlZC5cclxuYXBwLm9uKCd3aW5kb3ctYWxsLWNsb3NlZCcsICgpID0+IHtcclxuICAvLyBPbiBtYWNPUyBpdCBpcyBjb21tb24gZm9yIGFwcGxpY2F0aW9ucyBhbmQgdGhlaXIgbWVudSBiYXJcclxuICAvLyB0byBzdGF5IGFjdGl2ZSB1bnRpbCB0aGUgdXNlciBxdWl0cyBleHBsaWNpdGx5IHdpdGggQ21kICsgUVxyXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnZGFyd2luJykge1xyXG4gICAgYXBwLnF1aXQoKVxyXG4gIH1cclxufSlcclxuXHJcbmFwcC5vbignYWN0aXZhdGUnLCAoKSA9PiB7XHJcbiAgLy8gT24gbWFjT1MgaXQncyBjb21tb24gdG8gcmUtY3JlYXRlIGEgd2luZG93IGluIHRoZSBhcHAgd2hlbiB0aGVcclxuICAvLyBkb2NrIGljb24gaXMgY2xpY2tlZCBhbmQgdGhlcmUgYXJlIG5vIG90aGVyIHdpbmRvd3Mgb3Blbi5cclxuICBpZiAod2luID09PSBudWxsKSB7XHJcbiAgICBjcmVhdGVXaW5kb3coKVxyXG4gIH1cclxufSlcclxuXHJcbi8vIEluIHRoaXMgZmlsZSB5b3UgY2FuIGluY2x1ZGUgdGhlIHJlc3Qgb2YgeW91ciBhcHAncyBzcGVjaWZpYyBtYWluIHByb2Nlc3NcclxuLy8gY29kZS4gWW91IGNhbiBhbHNvIHB1dCB0aGVtIGluIHNlcGFyYXRlIGZpbGVzIGFuZCByZXF1aXJlIHRoZW0gaGVyZS5cclxuIl19